<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.htjy.dao.StudentDao">
    <insert id="addStudent" parameterType="com.htjy.entity.StudentModel" useGeneratedKeys="true">
    insert into t_student_info (
    registeredResidence,
	birthday,
	registeredResidenceType,
	address,
	education,
	entranceTime,
	graduationNo,
	graduation,
	graduationTime,
	cardId,
	cardIdType,
	technicalTitle,
	email,
	marriage,
	nation,
	phone,
	political,
	major,
	remarks,
	sex,
	anotherPhone,
	wechat,
	area,
	city,
	province,
	name,
	photo,
	teacherId
    )values(
    #{registeredResidence},
	#{birthday},
	#{registeredResidenceType},
	#{address},
	#{education},
	#{entranceTime},
	#{graduationNo},
	#{graduation},
	#{graduationTime},
	#{cardId},
	#{cardIdType},
	#{technicalTitle},
	#{email},
	#{marriage},
	#{nation},
	#{phone},
	#{political},
	#{major},
	#{remarks},
	#{sex},
	#{anotherPhone},
	#{wechat},
	#{area},
	#{city},
	#{province},
	#{name},
	#{photo},
	#{teacherId}	)
	<selectKey resultType="int" order="AFTER" keyProperty="id"> 
    SELECT LAST_INSERT_ID() AS id 
    </selectKey>
    </insert>
    
    <update id="updateStudent" parameterType="com.htjy.entity.StudentModel">
    	update t_student_info 
    	set 
    	registeredResidence=#{registeredResidence},
		birthday=#{birthday},
		registeredResidenceType=#{registeredResidenceType},
		address=#{address},
		education=#{education},
		entranceTime=#{entranceTime},
		graduationNo=#{graduationNo},
		graduation=#{graduation},
		graduationTime=#{graduationTime},
		cardId=#{cardId},
		cardIdType=#{cardIdType},
		technicalTitle=#{technicalTitle},
		email=#{email},
		marriage=#{marriage},
		nation=#{nation},
		phone=#{phone},
		political=#{political},
		major=#{major},
		remarks=#{remarks},
		sex=#{sex},
		anotherPhone=#{anotherPhone},
		wechat=#{wechat},
		area=#{area},
		city=#{city},
		province=#{province},
		name=#{name},
		photo=#{photo}
		where id=#{id}
		
    </update>
	<select id="queryDetail" parameterType="String" resultType="com.htjy.entity.StudentModel">
		select * from t_student_info where id=#{param1}
	</select>
	<select id="querySignDetail" parameterType="String" resultType="com.htjy.entity.StudentSignModel">
		select sig.*,adm.name teacherName from t_sign_up_info sig 
		left join t_admin_user_info adm on sig.teacherId=adm.adminId
		where sig.studentId =#{param1}
	</select>
	<!-- <resultMap type="com.htjy.entity.StudentModel" id="studentMap">
		<result column="id" property="oldId"/>
    	<result column="registeredResidence" property="L_addressProv"/>
		<result column="birthday" property="L_birthday"/>
		<result column="registeredResidenceType" property="L_cityType"/>
		<result column="address" property="L_detailAdd"/>
		<result column="education" property="L_eduBackground"/>
		<result column="entranceTime" property="L_gradeEnterTime"/>
		<result column="graduationNo" property="L_gradeNum"/>
		<result column="graduation" property="L_gradeSchool"/>
		<result column="graduationTime" property="L_gradeTime"/>
		<result column="cardId" property="L_identityNum"/>
		<result column="cardIdType" property="L_identityType"/>
		<result column="technicalTitle" property="L_jobLevel"/>
		<result column="email" property="L_mail"/>
		<result column="marriage" property="L_marry"/>
		<result column="nation" property="L_peoples"/>
		<result column="phone" property="L_phone"/>
		<result column="political" property="L_politicalStatus"/>
		<result column="major" property="L_profession"/>
		<result column="remarks" property="L_remark"/>
		<result column="sex" property="L_sex"/>
		<result column="anotherPhone" property="L_sosphone"/>
		<result column="wechat" property="L_wechat"/>
		<result column="area" property="area"/>
		<result column="city" property="city"/>
		<result column="province" property="province"/>
		<result column="name" property="username"/>
		<result column="photo" property="photo1"/>
		<result column="teacherId" property="teacherId"/>
	</resultMap> -->
	
	
	<insert id="addStudentSign" parameterType="com.htjy.entity.StudentSignModel">
		insert into t_sign_up_info (
		charge,
		schoolId,
		discount,
		dream,
		dreamType,
		entranceGrade,
		entranceType,
		examinationAreaId,
		firstVolunteer,
		fullType,
		inputTime,
		plus,
		plusCondition,
		arrangement,
		recruitSchool,
		recruitType,
		remark,
		scholarship,
		secondVolunteer,
		teacherId,
		checkStatus,
		studentId
		) values (
		#{charge},
		#{schoolId},
		#{discount},
		#{dream},
		#{dreamType},
		#{entranceGrade},
		#{entranceType},
		#{examinationAreaId},
		#{firstVolunteer},
		#{fullType},
		#{inputTime},
		#{plus},
		#{plusCondition},
		#{arrangement},
		#{recruitSchool},
		#{recruitType},
		#{remark},
		#{scholarship},
		#{secondVolunteer},
		#{teacherId},
		0,
		#{studentId}
		)
	</insert>
	<update id="updateStudentSign" parameterType="com.htjy.entity.StudentSignModel">
		update t_sign_up_info set
		charge=#{charge},
		schoolId=#{schoolId},
		discount=#{discount},
		dream=#{dream},
		dreamType=#{dreamType},
		entranceGrade=#{entranceGrade},
		entranceType=#{entranceType},
		examinationAreaId=#{examinationAreaId},
		firstVolunteer=#{firstVolunteer},
		fullType=#{fullType},
		inputTime=#{inputTime},
		plus=#{plus},
		plusCondition=#{plusCondition},
		arrangement=#{arrangement},
		recruitSchool=#{recruitSchool},
		recruitType=#{recruitType},
		remark=#{remark},
		scholarship=#{scholarship},
		secondVolunteer=#{secondVolunteer},
		teacherId=#{teacherId}
		where studentId=#{studentId}
		
	</update>
	<insert id="addFile" parameterType="com.htjy.entity.FileModel">
		insert into t_student_file_info 
		(cardIdFile,cardIdBackFile,graduationCertificate,blueBackPhoto,whiteBackPhoto,employCertificate,admission,studentId,complete) 
		values 
		(#{cardIdFile},#{cardIdBackFile},#{graduationCertificate},#{blueBackPhoto},#{whiteBackPhoto},#{employCertificate},#{admission},#{studentId},#{complete})
	</insert>
	<update id="updateFile" parameterType="com.htjy.entity.FileModel">
		update t_student_file_info 
		set 
		cardIdFile=#{cardIdFile},
		cardIdBackFile=#{cardIdBackFile},
		graduationCertificate=#{graduationCertificate},
		blueBackPhoto=#{blueBackPhoto},
		whiteBackPhoto=#{whiteBackPhoto},
		employCertificate=#{employCertificate},
		admission=#{admission},
		complete=#{complete}
		where studentId=#{studentId}
	</update>
	<select id="queryFile" parameterType="String" resultType="com.htjy.entity.FileModel">
		select * from t_student_file_info where studentId=#{param1}
	</select>
	
	<select id="queryCountNext" parameterType="map" resultType="int">
		select count(*) from t_student_info stu 
		left join t_sign_up_info sig on stu.id=sig.studentId
		where 1=1
		<if test="parentId != '' and parentId !=null">
			and stu.teacherId in (select adminId from t_admin_user_info where parentId=#{parentId})
		</if>
		<if test="teacher != '' and teacher !=null">
			and stu.teacherId =#{teacher}
		</if>
		<if test="start !=null">
			and sig.inputTime >=#{start}
		</if>
		<if test="end !=null">
			<![CDATA[and sig.inputTime <= #{end} ]]>
		</if>
		<if test="status !='' and status != null">
			and stu.checkStatus in 
			<foreach item="item" index="index" collection="status" open="("  
            separator="," close=")">  
            	#{item}  
        	</foreach>  
		</if>
		<if test="type != '' and type !=null">
			and sig.recruitType =#{type}
		</if>
		
	</select>
	
	<select id="queryCount" parameterType="map" resultType="int">
		select count(*) from t_student_info stu 
		left join t_sign_up_info sig on stu.id=sig.studentId
		left join t_admin_user_info adm on adm.adminId=stu.teacherId
		where 1=1
		<if test="name !='' and name != null">
			and stu.name like CONCAT(CONCAT('%', #{name}), '%') or adm.name like CONCAT(CONCAT('%', #{name}), '%')
		</if>
		<if test="adminId !='' and adminId != null">
			and stu.teacherId in (select adminId from t_admin_user_info where adminId=#{adminId})
		</if>
		<if test="parentId != '' and parentId !=null">
			and stu.teacherId in (select adminId from t_admin_user_info where parentId=#{parentId})
		</if>
		<if test="xxname != '' and xxname !=null">
			and stu.name like CONCAT(CONCAT('%', #{xxname}), '%') 
		</if>
		<if test="xxcardId != '' and xxcardId !=null">
			and stu.cardId like CONCAT(CONCAT('%', #{xxcardId}), '%')
		</if>
		<if test="xxphone != '' and xxphone !=null">
			and stu.phone like CONCAT(CONCAT('%', #{xxphone}), '%')
		</if>
		<if test="xxgrade != '' and xxgrade !=null">
			and sig.entranceGrade like CONCAT(CONCAT('%', #{xxgrade}), '%')
		</if>
		<if test="xxrecruitType != '' and xxrecruitType !=null">
			and sig.recruitType = #{xxrecruitType}
		</if>
		<if test="xxfullType != '' and xxfullType !=null">
			and sig.fullType =#{xxfullType}
		</if>
		<if test="xxdream != '' and xxdream !=null">
			and sig.dream = #{xxdream}
		</if>
		<if test="xxarrangement != '' and xxarrangement !=null">
			and sig.arrangement = #{xxarrangement}
		</if>
		<if test="xxstart !=null">
			and sig.inputTime >= #{xxstart}
		</if>
		<if test="xxend !=null">
			<![CDATA[and sig.inputTime <= #{xxend}]]>
		</if>
		<if test="xxplusCondition != '' and xxplusCondition !=null">
			and sig.plusCondition = #{xxplusCondition}
		</if>
		<if test="xxplus != '' and xxplus !=null">
			and sig.plus = #{xxplus}
		</if>
		<if test="xxstatus != '' and xxstatus !=null">
			and stu.checkStatus = #{xxstatus}
		</if>
		<if test="status !='' and status != null">
			and stu.checkStatus in 
			<foreach item="item" index="index" collection="status" open="("  
            separator="," close=")">  
            	#{item}  
        	</foreach>  
		</if>
	</select>
	<resultMap id="stuMap" type="com.htjy.entity.StudentModel">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="name" property="name" />
		<result column="fullType" jdbcType="BIT" property="fullType" />
	    <result column="recruitType" jdbcType="BIT" property="recruitType" />
	    <result column="arrangement" jdbcType="BIT" property="arrangement" />
	    <result column="examinationAreaId" jdbcType="INTEGER" property="examinationAreaId" />
	    <result column="entranceType" jdbcType="BIT" property="entranceType" />
	    <result column="recruitSchool" jdbcType="INTEGER" property="recruitSchool" />
	    <result column="entranceGrade" jdbcType="VARCHAR" property="entranceGrade" />
	    <result column="schoolId" jdbcType="INTEGER" property="schoolId" />
	    <result column="firstVolunteer" jdbcType="INTEGER" property="firstVolunteer" />
	    <result column="secondVolunteer" jdbcType="INTEGER" property="secondVolunteer" />
	    <result column="studentId" jdbcType="INTEGER" property="studentId" />
	    <result column="teacherId" jdbcType="INTEGER" property="teacherId" />
	    <result column="checkStatus" jdbcType="BIT" property="checkStatus" />
	    
	    <result column="schoolName" property="schoolName" />
	    <result column="firstName" property="firstName" />
	    <result column="secondName" property="secondName" />
	    <result column="teacherName" property="teacherName" />
	    <result column="recName" property="recName" />
	    <result column="examName" property="examName" />
	    <result column="complete" property="complete" />
	    <result column="scoreId" property="scoreId" />
	    <result column="post" property="post" />
		<collection property="feeDetail" ofType="com.htjy.entity.FeeModel" select="getStuList" column="id">
		   
		</collection>
	</resultMap>
	<resultMap type="com.htjy.entity.FeeModel" id="feeDetail">
		   <result column="studentId" property="studentId" />
		   <result column="project" property="project" />
		   <result column="cost" property="cost" />
		   <result column="payTime" property="payTime" />
		   <result column="complete" property="complete" />
		   <result column="refund" property="refund" />
	</resultMap>
	<select id="getStuList" resultMap="feeDetail" parameterType="int">
		select * from t_student_pay_log where studentId=#{id}
	</select>
	
	
	<select id="queryList" resultMap="stuMap">
		select stu.*,
		sig.*,
		sch.name schoolName,
		maj1.name firstName,
		maj2.name secondName, 
		adm.name teacherName,
		rec.name recName,
		exam.name examName,
		fil.complete,
		
		sco.socreId scoreId,
		post.post post
		from t_student_info stu 
		left join t_sign_up_info sig on stu.id=sig.studentId
		left join t_school_info sch on sch.id=sig.schoolId
		left join t_major_info maj1 on maj1.id=sig.firstVolunteer
		left join t_major_info maj2 on maj2.id=sig.secondVolunteer
		left join t_admin_user_info adm on adm.adminId=stu.teacherId
		left join t_recruit_school_area_info rec on rec.id=sig.recruitSchool
		left join t_examination_area_info exam on exam.id=sig.examinationAreaId
		left join t_student_file_info fil on fil.studentId=stu.id
		
		left join (select min(id) socreId,studentId from t_student_score_log group by studentId) sco on sco.studentId=stu.id 
		left join (select max(complete) post,studentId from t_book_post_log group by studentId) post on post.studentId=stu.id
		where 1=1
		<if test="name !='' and name != null">
		and stu.name like CONCAT(CONCAT('%', #{name}), '%') or adm.name like CONCAT(CONCAT('%', #{name}), '%')
		</if>
		<if test="adminId !='' and adminId != null">
			and stu.teacherId in (select adminId from t_admin_user_info where adminId=#{adminId})
		</if>
		<if test="parentId != '' and parentId !=null">
			and stu.teacherId in (select adminId from t_admin_user_info where parentId=#{parentId})
		</if>
		<if test="status !='' and status != null">
			and stu.checkStatus in 
			<foreach item="item" index="index" collection="status" open="("  
            separator="," close=")">  
            	#{item}  
        	</foreach>
		</if>
		<if test="type != '' and type !=null">
			and sig.recruitType =#{type}
		</if>
		<if test="teacher != '' and teacher !=null">
			and stu.teacherId =#{teacher}
		</if>
		<if test="start !=null">
			and sig.inputTime >=#{start}
		</if>
		<if test="end !=null">
			<![CDATA[and sig.inputTime <= #{end} ]]>
		</if>
		<if test="xxname != '' and xxname !=null">
			and stu.name like CONCAT(CONCAT('%', #{xxname}), '%')
		</if>
		<if test="xxcardId != '' and xxcardId !=null">
			and stu.cardId like CONCAT(CONCAT('%', #{xxcardId}), '%')
		</if>
		<if test="xxphone != '' and xxphone !=null">
			and stu.phone like CONCAT(CONCAT('%', #{xxphone}), '%')
		</if>
		<if test="xxgrade != '' and xxgrade !=null">
			and sig.entranceGrade like CONCAT(CONCAT('%', #{xxgrade}), '%')
		</if>
		<if test="xxrecruitType != '' and xxrecruitType !=null">
			and sig.recruitType = #{xxrecruitType}
		</if>
		<if test="xxfullType != '' and xxfullType !=null">
			and sig.fullType =#{xxfullType}
		</if>
		<if test="xxdream != '' and xxdream !=null">
			and sig.dream = #{xxdream}
		</if>
		<if test="xxarrangement != '' and xxarrangement !=null">
			and sig.arrangement = #{xxarrangement}
		</if>
		<if test="xxstart !=null">
			and sig.inputTime >= #{xxstart}
		</if>
		<if test="xxend !=null">
			<![CDATA[and sig.inputTime <= #{xxend}]]>
		</if>
		<if test="xxplusCondition != '' and xxplusCondition !=null">
			and sig.plusCondition = #{xxplusCondition}
		</if>
		<if test="xxplus != '' and xxplus !=null">
			and sig.plus = #{xxplus}
		</if>
		<if test="xxstatus != '' and xxstatus !=null">
			and stu.checkStatus = #{xxstatus}
		</if>
		order by stu.id desc
		limit
		#{curr} ,#{limit}
		
	</select>
	
	<select id="addFee">
		insert into t_student_pay_log (project,cost,payTime,studentId,complete,refund)
		values
		<foreach collection="list" item="emp" separator=",">
			(#{emp.project},#{emp.cost},#{emp.payTime},#{emp.studentId},0,0)
		</foreach>
	</select>
	<update id="updateFeeList">
		<!-- <foreach collection="list" item="item" index="index" open="" close=";" separator=";">
			update t_student_pay_log set project = #{item.project},cost=#{item.cost},payTime=#{item.payTime} where id = ${item.id}
		</foreach> -->
		update t_student_pay_log 
	    set  project=
	    <foreach collection="list" item="item" index="index" 
	        separator=" " open="case ID" close="end">
	        when #{item.id} then #{item.project}
	    </foreach>
	    ,cost=
	    <foreach collection="list" item="item" index="index" 
	        separator=" " open="case ID" close="end">
	        when #{item.id} then #{item.cost}
	    </foreach>
	    ,payTime=
	    <foreach collection="list" item="item" index="index" 
	        separator=" " open="case ID" close="end">
	        when #{item.id} then #{item.payTime}
	    </foreach>
	    where id in
	    <foreach collection="list" index="index" item="item" 
	        separator="," open="(" close=")">
	        #{item.id}
	    </foreach>
	</update>
	
	<insert id="addFeeSingle">
		insert into t_student_pay_log (project,cost,payTime,studentId,complete,refund)
		values (#{project},#{cost},#{payTime},#{studentId},0,0)
	</insert>
	<select id="queryFee" parameterType="int" resultType="com.htjy.entity.FeeModel">
		select pay.*,boo.complete postStatus,stu.checkStatus checkStatus 
		from t_student_pay_log pay
		left join (select * from t_book_post_log where studentId=#{param1} order by id desc limit 1) boo on boo.studentId=pay.studentId
		left join t_student_info stu on stu.id=pay.studentId 
		where pay.studentId=#{param1}
	</select>
	<delete id="delFee" parameterType="int">
		delete  from t_student_pay_log where studentId=#{param1}
	</delete>
	<select id="queryScore" parameterType="com.htjy.entity.ScoreModel" resultType="com.htjy.entity.ScoreModel">
		select sco.*,stu.name studentName 
		from t_student_score_log sco 
		left join t_student_info stu on sco.studentId=stu.id
		where sco.studentId=#{studentId}
	</select>
	<insert id="addScore">
		insert into t_student_score_log (studentId,semester,entranceGrade,subject,score)
		values
		<foreach collection="list" item="emp" separator=",">  
            (#{emp.studentId},#{emp.semester},#{emp.entranceGrade},#{emp.subject},#{emp.score})  
        </foreach> 
	</insert>
	<update id="updateStatus" parameterType="int">
		update t_student_info set checkStatus=#{param2} where id=#{param1} 
	</update>
	<update id="updateStatusSign" parameterType="int">
		update t_sign_up_info set checkStatus=#{param2} where studentId=#{param1} 
	</update>
	<update id="updateFee">
		update t_student_pay_log set complete=#{complete} where studentId=#{studentId} 
		<if test="split != '' and split !=null">
			and id=#{split}
		</if>
	</update>
	<update id="insertPost" parameterType="int">
		insert into t_book_post_log (studentId,complete) values (#{param1},#{param2})
	</update>
	
	<delete id="delStudent" parameterType="int">
		delete from t_student_info where id=#{param1}
	</delete>
	<update id="updateAssign">
		update t_student_info set teacherId=#{param2} where id=#{param1}
	</update>
	<update id="updateAssignSign">
		update t_sign_up_info set teacherId=#{param2} where studentId=#{param1}
	</update>
</mapper>